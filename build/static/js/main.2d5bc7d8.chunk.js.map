{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","args","compressImage","bind","handleChange","state","rendered","maxSizeKB","maxWidthOrHeight","webWorker","fileName","progress","inputSize","outputSize","inputUrl","outputUrl","mainThread","target","e","setState","currentTarget","value","this","console","log","p","useWebWorker","targetName","prevState","event","a","file","files","imageCompression","getExifOrientation","size","toFixed","URL","createObjectURL","options","maxIteration","alwaysKeepResolution","maxSizeMB","onProgress","output","name","className","htmlFor","type","id","onChange","handleSizeChange","accept","Math","round","src","alt","href","download","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8UAIqBA,E,kDACnB,aAAsB,IAAD,iDAANC,EAAM,yBAANA,EAAM,uBACnB,+BAASA,KACJC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,MAAQ,CACXC,UAAU,EACVC,UAAW,EACXC,iBAAkB,IAClBC,UAAW,CACTC,SAAU,KACVC,SAAU,KACVC,UAAW,KACXC,WAAY,KACZC,SAAU,KACVC,UAAW,MAEbC,WAAY,CACVL,SAAU,KACVC,UAAW,KACXC,WAAY,KACZC,SAAU,KACVC,UAAW,OArBI,E,gDA0BrB,SAAaE,GAAS,IAAD,OACnB,OAAO,SAACC,GACN,EAAKC,SAAL,eAAiBF,EAASC,EAAEE,cAAcC,W,8BAI9C,SAAiBJ,GAAS,IAAD,OACjBX,EAAWgB,KAAKjB,MAAMC,SAC5B,OAAO,SAACY,GACN,EAAKC,SAAL,eAAiBF,EAASC,EAAEE,cAAcC,QACtCf,IACFiB,QAAQC,IAAI,aACZ,EAAKL,SAAS,CAAEb,UAAU,Q,wBAMhC,SAAWmB,EAAGC,GACZ,IAAMC,EAAaD,EAAe,YAAc,aAChDJ,KAAKH,UAAS,SAACS,GAAD,mBAAC,eACVA,GADS,kBAEXD,EAFW,YAAC,eAGRC,EAAUD,IAHH,IAIVhB,SAAUc,W,kEAKhB,WAAoBI,EAAOH,GAA3B,4BAAAI,EAAA,6DACER,KAAKjB,MAAMC,UAAW,EAChByB,EAAOF,EAAMZ,OAAOe,MAAM,GAChCT,QAAQC,IAAI,QAASO,GAHvB,KAIER,QAJF,SAMUU,IAAiBC,mBAAmBH,GAN9C,+BAIUP,IAJV,UAKI,kBALJ,MAQQG,EAAaD,EAAe,YAAc,aAChDJ,KAAKH,UAAS,SAACS,GAAD,mBAAC,eACVA,GADS,kBAEXD,EAFW,YAAC,eAGRC,EAAUD,IAHH,IAIVf,WAAYmB,EAAKI,KAAO,KAAO,MAAMC,QAAQ,GAC7CtB,SAAUuB,IAAIC,gBAAgBP,UAG9BQ,EAAU,CACZC,aAAc,IACdC,qBAAsB,EACtBC,UAAWpB,KAAKjB,MAAME,UAAY,KAElCmB,eACAiB,WAAY,SAAClB,GAAD,OAAO,EAAKkB,WAAWlB,EAAGC,KAvB1C,UAyBuBO,YAAiBF,EAAMQ,GAzB9C,QAyBQK,EAzBR,OA0BErB,QAAQC,IAAI,SAAUoB,GACtBtB,KAAKH,SAAS,CAAET,SAAUkC,EAAOC,OACjCvB,KAAKH,SAAS,CAAEb,UAAU,IAC1BgB,KAAKH,UAAS,SAACS,GAAD,mBAAC,eACVA,GADS,kBAEXD,EAFW,YAAC,eAGRC,EAAUD,IAHH,IAIVd,YAAa+B,EAAOT,KAAO,KAAO,MAAMC,QAAQ,GAChDrB,UAAWsB,IAAIC,gBAAgBM,UAlCrC,iD,6EAuCA,WAAU,IAAD,OACP,EAA6CtB,KAAKjB,MAA1CI,EAAR,EAAQA,UAAWO,EAAnB,EAAmBA,WAAYT,EAA/B,EAA+BA,UAC/B,OACE,yBAAKuC,UAAU,OACb,wCAEE,6BACA,2BAAOC,QAAQ,aAAf,uBAEE,2BACEC,KAAK,SACLC,GAAG,YACHJ,KAAK,YACLxB,MAAOd,EACP2C,SAAU5B,KAAK6B,iBAAiB,gBAGpC,6BACA,8BAEF,6BACE,2BAAOJ,QAAQ,eAAf,6BAC6B,IAC3B,2BACEE,GAAG,cACHD,KAAK,OACLI,OAAO,UACPF,SAAU,SAAChC,GAAD,OAAO,EAAKhB,cAAcgB,GAAG,OAG3C,2BACG,IACAF,EAAWJ,WACV,oDAAiD,KAAvBI,EAAWJ,UAArC,OAEF,6BACCI,EAAWL,UAAmC,GAAvBW,KAAKjB,MAAMC,UACjC,gDAAsBU,EAAWL,SAAjC,MAEDK,EAAWH,YAAqC,GAAvBS,KAAKjB,MAAMC,UACnC,sDACgD,KAAxBU,EAAWH,WADnC,OAEE,6BAFF,qBAGIG,EAAWH,WAAaG,EAAWJ,WAAWwB,QAAQ,GAH1D,iBAKE,6BALF,oBAMoB7B,EANpB,MAOE,6BAPF,yBAQG8C,KAAKC,MAA8B,KAAxBtC,EAAWH,YARzB,MASE,6BACCwC,KAAKC,MAA8B,KAAxBtC,EAAWH,YAAqBN,EACxC,kDACA,eAKVS,EAAWF,UAAYL,EAAUK,WACV,GAAvBQ,KAAKjB,MAAMC,UACT,+BACE,+BACE,4BACE,6CACA,gDAGJ,+BACE,4BACE,4BACE,yBACEiD,IAAKvC,EAAWF,UAAYL,EAAUK,SACtC0C,IAAI,WAGR,4BACE,uBACEC,KAAMzC,EAAWD,UACjB2C,SAAUpC,KAAKjB,MAAMK,UAFvB,0CAKE,6BACA,yBACE6C,IAAKvC,EAAWD,WAAaN,EAAUM,UACvCyC,IAAI,qB,GAlLKG,IAAMC,WCQnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.2d5bc7d8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport imageCompression from \"browser-image-compression\";\n\nexport default class App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.compressImage = this.compressImage.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      rendered: false,\n      maxSizeKB: 5,\n      maxWidthOrHeight: 20000,\n      webWorker: {\n        fileName: null,\n        progress: null,\n        inputSize: null,\n        outputSize: null,\n        inputUrl: null,\n        outputUrl: null,\n      },\n      mainThread: {\n        progress: null,\n        inputSize: null,\n        outputSize: null,\n        inputUrl: null,\n        outputUrl: null,\n      },\n    };\n  }\n\n  handleChange(target) {\n    return (e) => {\n      this.setState({ [target]: e.currentTarget.value });\n    };\n  }\n\n  handleSizeChange(target) {\n    const rendered = this.state.rendered;\n    return (e) => {\n      this.setState({ [target]: e.currentTarget.value });\n      if (rendered) {\n        console.log(\"rerender?\");\n        this.setState({ rendered: false });\n        // this.compressImage(e, false);\n      }\n    };\n  }\n\n  onProgress(p, useWebWorker) {\n    const targetName = useWebWorker ? \"webWorker\" : \"mainThread\";\n    this.setState((prevState) => ({\n      ...prevState,\n      [targetName]: {\n        ...prevState[targetName],\n        progress: p,\n      },\n    }));\n  }\n\n  async compressImage(event, useWebWorker) {\n    this.state.rendered = false;\n    const file = event.target.files[0];\n    console.log(\"input\", file);\n    console.log(\n      \"ExifOrientation\",\n      await imageCompression.getExifOrientation(file)\n    );\n    const targetName = useWebWorker ? \"webWorker\" : \"mainThread\";\n    this.setState((prevState) => ({\n      ...prevState,\n      [targetName]: {\n        ...prevState[targetName],\n        inputSize: (file.size / 1024 / 1024).toFixed(2),\n        inputUrl: URL.createObjectURL(file),\n      },\n    }));\n    var options = {\n      maxIteration: 100,\n      alwaysKeepResolution: 1,\n      maxSizeMB: this.state.maxSizeKB / 1024,\n\n      useWebWorker,\n      onProgress: (p) => this.onProgress(p, useWebWorker),\n    };\n    const output = await imageCompression(file, options);\n    console.log(\"output\", output);\n    this.setState({ fileName: output.name });\n    this.setState({ rendered: true });\n    this.setState((prevState) => ({\n      ...prevState,\n      [targetName]: {\n        ...prevState[targetName],\n        outputSize: (output.size / 1024 / 1024).toFixed(5),\n        outputUrl: URL.createObjectURL(output),\n      },\n    }));\n  }\n\n  render() {\n    const { webWorker, mainThread, maxSizeKB } = this.state;\n    return (\n      <div className=\"App\">\n        <div>\n          Options:\n          <br />\n          <label htmlFor=\"maxSizeKB\">\n            max file size in kb:\n            <input\n              type=\"number\"\n              id=\"maxSizeKB\"\n              name=\"maxSizeKB\"\n              value={maxSizeKB}\n              onChange={this.handleSizeChange(\"maxSizeKB\")}\n            />\n          </label>\n          <br />\n          <hr />\n        </div>\n        <div>\n          <label htmlFor=\"main-thread\">\n            Browsers based compression{\" \"}\n            <input\n              id=\"main-thread\"\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={(e) => this.compressImage(e, false)}\n            />\n          </label>\n          <p>\n            {\" \"}\n            {mainThread.inputSize && (\n              <span>Source image size: {mainThread.inputSize * 1024} kb</span>\n            )}\n            <br />\n            {mainThread.progress && this.state.rendered == false && (\n              <span>Compressing... {mainThread.progress} %</span>\n            )}\n            {mainThread.outputSize && this.state.rendered == true && (\n              <span>\n                , Output image size: {mainThread.outputSize * 1024} kb.\n                <br /> compressed size:\n                {(mainThread.outputSize / mainThread.inputSize).toFixed(2)}% of\n                original!\n                <br />\n                Maximum filesize:{maxSizeKB} KB\n                <br /> actual achieved size:\n                {Math.round(mainThread.outputSize * 1024)} KB\n                <br />\n                {Math.round(mainThread.outputSize * 1024) > maxSizeKB\n                  ? \"Error: Failed to compress to desired file size.\"\n                  : \"success!\"}\n              </span>\n            )}\n          </p>\n        </div>\n        {(mainThread.inputUrl || webWorker.inputUrl) &&\n          this.state.rendered == true && (\n            <table>\n              <thead>\n                <tr>\n                  <td>input preview</td>\n                  <td>output preview</td>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>\n                    <img\n                      src={mainThread.inputUrl || webWorker.inputUrl}\n                      alt=\"input\"\n                    />\n                  </td>\n                  <td>\n                    <a\n                      href={mainThread.outputUrl}\n                      download={this.state.fileName}\n                    >\n                      left click to download compressed image\n                      <br />\n                      <img\n                        src={mainThread.outputUrl || webWorker.outputUrl}\n                        alt=\"output\"\n                      />\n                    </a>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          )}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}